--- a/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/react/RNGestureHandlerButtonViewManager.kt
+++ b/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/react/RNGestureHandlerButtonViewManager.kt
@@ -5,11 +5,7 @@ import android.annotation.TargetApi
 import android.content.Context
 import android.content.res.ColorStateList
 import android.graphics.Color
-import android.graphics.drawable.Drawable
-import android.graphics.drawable.LayerDrawable
-import android.graphics.drawable.PaintDrawable
-import android.graphics.drawable.RippleDrawable
-import android.graphics.drawable.ShapeDrawable
+import android.graphics.drawable.*
 import android.graphics.drawable.shapes.RectShape
 import android.os.Build
 import android.util.TypedValue
@@ -248,10 +244,8 @@ class RNGestureHandlerButtonViewManager : ViewGroupManager<ButtonViewGroup>(), R
         val colors = intArrayOf(rippleColor!!)
         ColorStateList(states, colors)
       } else {
-        // if rippleColor is null, reapply the default color
-        context.theme.resolveAttribute(android.R.attr.colorControlHighlight, resolveOutValue, true)
-        val colors = intArrayOf(resolveOutValue.data)
-        ColorStateList(states, colors)
+        // if rippleColor is null, remove ripple effect
+        return ColorDrawable(_backgroundColor)
       }
 
       val drawable = RippleDrawable(
diff --git a/node_modules/react-native-gesture-handler/lib/module/components/GestureComponents.web.js b/node_modules/react-native-gesture-handler/lib/module/components/GestureComponents.web.js
index d773992..0af93f4 100644
--- a/node_modules/react-native-gesture-handler/lib/module/components/GestureComponents.web.js
+++ b/node_modules/react-native-gesture-handler/lib/module/components/GestureComponents.web.js
@@ -1,7 +1,7 @@
 function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
 
 import * as React from 'react';
-import { DrawerLayoutAndroid as RNDrawerLayoutAndroid, FlatList as RNFlatList, Switch as RNSwitch, TextInput as RNTextInput, ScrollView as RNScrollView, View } from 'react-native';
+import { FlatList as RNFlatList, Switch as RNSwitch, TextInput as RNTextInput, ScrollView as RNScrollView, View } from 'react-native';
 import createNativeWrapper from '../handlers/createNativeWrapper';
 export const ScrollView = createNativeWrapper(RNScrollView, {
   disallowInterruption: false
@@ -12,9 +12,10 @@ export const Switch = createNativeWrapper(RNSwitch, {
   disallowInterruption: true
 });
 export const TextInput = createNativeWrapper(RNTextInput);
-export const DrawerLayoutAndroid = createNativeWrapper(RNDrawerLayoutAndroid, {
-  disallowInterruption: true
-}); // @ts-ignore -- TODO(TS) to investigate if it's needed
+export const DrawerLayoutAndroid = () => {
+  console.warn('DrawerLayoutAndroid is not supported on web!');
+  return <View />;
+};
 
 DrawerLayoutAndroid.positions = RNDrawerLayoutAndroid.positions; // RefreshControl is implemented as a functional component, rendering a View
 // NativeViewGestureHandler needs to set a ref on its child, which cannot be done
